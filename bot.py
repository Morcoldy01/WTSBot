import sqlite3
import random
import string
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext

# --- üîß –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"  # üî• –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ @BotFather
ADMIN_ID = 123456789  # üî• –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# --- üì¶ –õ–û–ì–ò ---
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- üìÇ –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ ---
def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id TEXT UNIQUE,
            token TEXT UNIQUE,
            ip TEXT
        )"""
    )
    conn.commit()
    conn.close()

# --- üîë –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê ---
def generate_token():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ 5 –±—É–∫–≤."""
    return "".join(random.choices(string.ascii_uppercase, k=5))

# --- üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
def save_user(telegram_id, token):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É."""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO users (telegram_id, token) VALUES (?, ?)",
        (telegram_id, token),
    )
    conn.commit()
    conn.close()

# --- üëë –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê ---
def is_admin(update: Update):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return update.message.from_user.id == ADMIN_ID

# --- üìå –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
def add_user(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /adduser <telegram_id> (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)"""
    if not is_admin(update):
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /adduser <Telegram ID>")
        return

    user_id = context.args[0]
    token = generate_token()

    save_user(user_id, token)
    
    update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\nüîë –¢–æ–∫–µ–Ω: `{token}`")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        context.bot.send_message(chat_id=user_id, text=f"üîë –í–∞—à —Ç–æ–∫–µ–Ω: `{token}`")
    except Exception as e:
        update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# --- üîç –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê ---
def check_token(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /checktoken <—Ç–æ–∫–µ–Ω> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ."""
    if not context.args:
        update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /checktoken <—Ç–æ–∫–µ–Ω>")
        return

    token = context.args[0]

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users WHERE token = ?", (token,))
    result = cursor.fetchone()
    conn.close()

    if result:
        update.message.reply_text(f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. Telegram ID: {result[0]}")
    else:
        update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!")

# --- üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞."""
    init_db()  # –°–æ–∑–¥–∞—ë–º –±–∞–∑—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("adduser", add_user))  # –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.add_handler(CommandHandler("checktoken", check_token))  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
